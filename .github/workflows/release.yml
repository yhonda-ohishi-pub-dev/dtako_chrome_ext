name: Build and Release

on:
  push:
    tags:
      - 'v*'  # v1.0, v1.1 などのタグでトリガー

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Restore .pem file from secrets
      run: |
        $pemBase64 = "${{ secrets.CHROME_EXT_PEM }}"
        $pemBytes = [System.Convert]::FromBase64String($pemBase64)
        [System.IO.File]::WriteAllBytes("dtako_chrome_ext.pem", $pemBytes)
        Write-Host ".pem file restored successfully"
      shell: powershell

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Build CRX file
      run: |
        # crx3パッケージをインストール
        npm install -g crx3

        # 一時ディレクトリを作成してクリーンなファイルをコピー
        $currentDir = (Get-Location).Path
        $tempExtDir = Join-Path $env:TEMP "chrome_ext_build"

        if (Test-Path $tempExtDir) {
          Remove-Item $tempExtDir -Recurse -Force
        }
        New-Item -ItemType Directory -Path $tempExtDir | Out-Null

        # 必要なファイルのみをコピー
        $filesToCopy = @(
          "manifest.json",
          "background.js",
          "content_script.js",
          "popup.js",
          "DataDisplayConfig.js",
          "GeneralCsv.js",
          "OperationEdit.js",
          "OperationExpenseEdit.js",
          "OperationWorkEdit.js",
          "jquery-3.7.1.min.js",
          "jquery.cookie.js",
          "favicon-16x16.png",
          "favicon-32x32.png",
          "html"
        )

        foreach ($item in $filesToCopy) {
          $sourcePath = Join-Path $currentDir $item
          if (Test-Path $sourcePath) {
            Copy-Item $sourcePath -Destination $tempExtDir -Recurse -Force
            Write-Host "Copied: $item"
          }
        }

        # crx3でCRXファイルをビルド
        $pemFile = Join-Path $currentDir "dtako_chrome_ext.pem"
        $crxFile = Join-Path $currentDir "dtako_chrome_ext.crx"

        crx3 "$tempExtDir" -p "$pemFile" -o "$crxFile"

        if (Test-Path $crxFile) {
          Write-Host "CRX file created successfully"
          $fileSize = (Get-Item $crxFile).Length
          Write-Host "CRX file size: $fileSize bytes"
        } else {
          Write-Error "Failed to create CRX file"
          exit 1
        }

        # クリーンアップ
        Remove-Item $tempExtDir -Recurse -Force
      shell: powershell

    - name: Update update_manifest.xml
      run: |
        $version = "${{ github.ref_name }}".TrimStart('v')
        $content = Get-Content update_manifest.xml -Raw
        $content = $content -replace "version='[^']*'", "version='$version'"
        $content = $content -replace "download/v[^/]*/", "download/${{ github.ref_name }}/"
        Set-Content update_manifest.xml $content
        Write-Host "Updated update_manifest.xml with version $version"
      shell: powershell

    - name: Install Inno Setup
      run: |
        choco install innosetup -y

    - name: Build installer
      run: |
        & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss
      shell: powershell

    - name: Create Release and Upload Asset
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./Output/digitaco-chrome-ext-setup-v*.exe
          dtako_chrome_ext.crx
          update_manifest.xml
        name: Release ${{ github.ref_name }}
        body: |
          ## デジタコデータ取込補助 ${{ github.ref_name }}

          ### インストール方法
          1. 下記の `.exe` ファイルをダウンロード
          2. ダウンロードした `.exe` ファイルを実行
          3. インストーラーの指示に従う
          4. Chromeを開いて `chrome://extensions/` にアクセス
          5. 「デベロッパーモード」をONにする
          6. 「パッケージ化されていない拡張機能を読み込む」をクリック
          7. インストールフォルダ（通常 `C:\Program Files\デジタコデータ取込補助`）を選択

          ### 変更内容
          - 初回リリース
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-pages:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout main branch
      uses: actions/checkout@v4
      with:
        ref: main

    - name: Create pages directory
      run: |
        mkdir -p pages
        cp update_manifest.xml pages/

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'pages'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

name: Build and Release

on:
  push:
    tags:
      - 'v*'  # v1.0, v1.1 などのタグでトリガー

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Restore .pem file from secrets
      run: |
        $pemBase64 = "${{ secrets.CHROME_EXT_PEM }}"
        $pemBytes = [System.Convert]::FromBase64String($pemBase64)
        [System.IO.File]::WriteAllBytes("dtako_chrome_ext.pem", $pemBytes)
        Write-Host ".pem file restored successfully"
      shell: powershell

    - name: Build CRX file
      run: |
        # Chromeのパスを探す
        $chromePaths = @(
          "C:\Program Files\Google\Chrome\Application\chrome.exe",
          "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
          "$env:LOCALAPPDATA\Google\Chrome\Application\chrome.exe"
        )

        $chromePath = $null
        foreach ($path in $chromePaths) {
          if (Test-Path $path) {
            $chromePath = $path
            Write-Host "Found Chrome at: $chromePath"
            break
          }
        }

        if (-not $chromePath) {
          Write-Error "Chrome not found"
          exit 1
        }

        $currentDir = (Get-Location).Path
        $pemFile = Join-Path $currentDir "dtako_chrome_ext.pem"
        $tempExtDir = Join-Path $env:TEMP "chrome_ext_build"

        # 一時ディレクトリを作成してクリーンなファイルをコピー
        if (Test-Path $tempExtDir) {
          Remove-Item $tempExtDir -Recurse -Force
        }
        New-Item -ItemType Directory -Path $tempExtDir | Out-Null

        # 必要なファイルのみをコピー（.pemや.github、Outputなどを除外）
        $excludeDirs = @('.github', '.git', 'Output', 'node_modules')
        $excludeFiles = @('*.pem', '*.crx', '.gitignore', 'build-installer.bat', 'installer.iss', 'update_manifest.xml', 'README.md')

        Get-ChildItem -Path $currentDir -Exclude $excludeDirs | Where-Object {
          $item = $_
          $isExcluded = $false
          foreach ($pattern in $excludeFiles) {
            if ($item.Name -like $pattern) {
              $isExcluded = $true
              break
            }
          }
          -not $isExcluded
        } | Copy-Item -Destination $tempExtDir -Recurse -Force

        Write-Host "Extension files copied to: $tempExtDir"

        # Chromeでcrxファイルをビルド
        & $chromePath --pack-extension="$tempExtDir" --pack-extension-key="$pemFile"

        $crxOutput = "$tempExtDir.crx"
        if (Test-Path $crxOutput) {
          Move-Item $crxOutput (Join-Path $currentDir "dtako_chrome_ext.crx") -Force
          Write-Host "CRX file created successfully"
        } else {
          Write-Error "Failed to create CRX file"
          exit 1
        }

        # クリーンアップ
        Remove-Item $tempExtDir -Recurse -Force
      shell: powershell

    - name: Update update_manifest.xml
      run: |
        $version = "${{ github.ref_name }}".TrimStart('v')
        $content = Get-Content update_manifest.xml -Raw
        $content = $content -replace "version='[^']*'", "version='$version'"
        $content = $content -replace "download/v[^/]*/", "download/${{ github.ref_name }}/"
        Set-Content update_manifest.xml $content
        Write-Host "Updated update_manifest.xml with version $version"
      shell: powershell

    - name: Install Inno Setup
      run: |
        choco install innosetup -y

    - name: Build installer
      run: |
        & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss
      shell: powershell

    - name: Create Release and Upload Asset
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./Output/digitaco-chrome-ext-setup-v1.0.exe
          dtako_chrome_ext.crx
          update_manifest.xml
        name: Release ${{ github.ref_name }}
        body: |
          ## デジタコデータ取込補助 ${{ github.ref_name }}

          ### インストール方法
          1. 下記の `.exe` ファイルをダウンロード
          2. ダウンロードした `.exe` ファイルを実行
          3. インストーラーの指示に従う
          4. Chromeを開いて `chrome://extensions/` にアクセス
          5. 「デベロッパーモード」をONにする
          6. 「パッケージ化されていない拡張機能を読み込む」をクリック
          7. インストールフォルダ（通常 `C:\Program Files\デジタコデータ取込補助`）を選択

          ### 変更内容
          - 初回リリース
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
